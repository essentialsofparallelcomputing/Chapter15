FROM ubuntu:20.04 AS builder

LABEL essentialsofparallelcomputing/chapter15 \
      Parallel and High Performance Computing, Manning Publications\
      Robey and Zamora, brobey@earthlink.net

ENV PATH "/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"

# Install dependency packages
RUN cp /etc/apt/sources.list /etc/apt/sources.list~ && \
    sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
RUN set -ex \
    && apt-get -y update \
    && DEBIAN_FRONTEND=noninteractive \
       apt-get -qq build-dep -y munge slurm-wlm \
    && apt-get -qq install git vim man2html liblz4-dev libcurl4-openssl-dev munge \
         python python-setuptools python-dev mariadb-server supervisor netcat wget expect \
         mpich libmpich-dev \
         openmpi-bin openmpi-doc libopenmpi-dev

# make /bin/sh symlink to bash instead of dash:
RUN echo "dash dash/sh boolean false" | debconf-set-selections
RUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

# Install bash with net redirections /usr/local/bin for supervisor to use
RUN wget ftp://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz && tar -xzf bash-5.0.tar.gz && \
      cd bash-5.0 && ./configure --enable-net-redirections && \
      make && make install && cd .. && rm -rf bash-5.0 bash-5.0.tar.gz

# Installing latest GCC compiler (version 10)
RUN apt-get -qq update && \
    apt-get -qq install -y gcc-10 g++-10 gfortran-10 && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN update-alternatives \
      --install /usr/bin/gcc      gcc      /usr/bin/gcc-9       80 \
      --slave   /usr/bin/g++      g++      /usr/bin/g++-9          \
      --slave   /usr/bin/gfortran gfortran /usr/bin/gfortran-9     \
      --slave   /usr/bin/gcov     gcov     /usr/bin/gcov-9      && \
    update-alternatives \
      --install /usr/bin/gcc      gcc      /usr/bin/gcc-10      90 \
      --slave   /usr/bin/g++      g++      /usr/bin/g++-10         \
      --slave   /usr/bin/gfortran gfortran /usr/bin/gfortran-10    \
      --slave   /usr/bin/gcov     gcov     /usr/bin/gcov-10     && \
    chmod u+s /usr/bin/update-alternatives

#RUN rm -f /var/lib/mysql/ibdata1

# Compile, build and install Slurm from Git source

ARG SLURM_TAG=slurm-19-05-4-1
RUN update-alternatives --set gcc /usr/bin/gcc-9
RUN set -ex \
    && git clone https://github.com/SchedMD/slurm.git \
    && cd slurm \
    && git checkout tags/$SLURM_TAG \
    && ./configure --enable-debug --prefix=/usr \
       --sysconfdir=/etc/slurm --with-mysql_config=/usr/bin \
       --libdir=/usr/lib64 \
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && cd .. \
    && rm -rf slurm \
    && groupadd -r slurm && useradd -r -g slurm slurm \
    && mkdir -p /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/lib/slurmd \
        /var/log/slurm \
    && chown slurm:root \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/lib/slurmd \
        /var/log/slurm

RUN update-alternatives --set gcc /usr/bin/gcc-10

RUN mkdir -p /var/run/supervisor

RUN mkdir -p /var/run/mariadb && mkdir -p /var/run/mysqld \
    && chown -R mysql:mysql /var/lib/mysql /var/run/mariadb /var/run/mysqld \
    && chmod -R 777 /var/lib/mysql /var/run/mariadb /var/run/mysqld

RUN mkdir -p /run/munge && chown munge:munge /run/munge \
    && /usr/sbin/create-munge-key -f

# Copy Slurm configuration files into the container
COPY files/slurm/slurm.conf /etc/slurm/slurm.conf
#COPY files/slurm/gres.conf /etc/slurm/gres.conf
COPY files/slurm/slurmdbd.conf /etc/slurm/slurmdbd.conf
COPY files/supervisord.ubuntu20.04.conf /etc/supervisord.conf

# Mark externally mounted volumes
VOLUME ["/var/lib/mysql", "/var/lib/slurmd", "/var/spool/slurmd", "/var/log/slurm"]

COPY docker-entrypoint.ubuntu20.04.sh /usr/local/bin/docker-entrypoint.sh
COPY files/mysql_secure.sh /usr/local/bin/mysql_secure.sh
RUN chmod +x /usr/local/bin/mysql_secure.sh

# Add Tini
ARG TINI_VERSION=v0.18.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /sbin/tini
RUN chmod +x /sbin/tini

SHELL ["/usr/local/bin/bash", "-c"]

WORKDIR /home/chapter15

RUN git clone --recursive https://github.com/EssentialsOfParallelComputing/Chapter15
WORKDIR /home/chapter15/Chapter15
#RUN make

ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/docker-entrypoint.sh"]
CMD ["/usr/local/bin/bash"]
